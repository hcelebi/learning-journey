@Library('jenkinsfile-sharedlibraries@master')

def scmUrl = scm.getUserRemoteConfigs()[0].getUrl()
Map gitVars
def (GROUP, REPOSITORY) = JOB_NAME.toLowerCase().split("/")

def DOCKER_IMAGE_NAME = GROUP + "-" + REPOSITORY
String SHORT_BRANCH_NAME
String DOCKER_IMAGE_VERSION

pipeline {
    agent {
        label 'dockerbuilder'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '15', artifactNumToKeepStr: '10'))
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        gitLabConnection('gitlab-connection')
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }

    environment {
        DOCKER_GID = 990
    }

    triggers {
        gitlab(
                triggerOnPush: true,
                triggerOnMergeRequest: false,
                triggerOpenMergeRequestOnPush: "never",
                triggerOnNoteRequest: true,
                noteRegex: "retry",
                skipWorkInProgressMergeRequest: false,
                ciSkip: true,
                setBuildDescription: true,
                addNoteOnMergeRequest: true,
                addCiMessage: true,
                addVoteOnMergeRequest: true,
                acceptMergeRequestOnSuccess: false,
                branchFilterType: "RegexBasedFilter",
                sourceBranchRegex: '(feature/.*|master|hotfix.*|bug/.*|improvement/.*|merge/.*)',
                cancelPendingBuildsOnUpdate: true,
                secretToken: "")
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    sh "printenv"
                    echo 'Checkout stage started'
                    deleteDir()
                    gitVars = checkout([$class                           : 'GitSCM',
                                        branches                         : scm.branches,
                                        doGenerateSubmoduleConfigurations: false,
                                        extensions                       : [
                                                [$class: 'AuthorInChangelog'],
                                                [$class: 'CleanBeforeCheckout'],
                                                [$class: 'UserIdentity', email: 'dl-gg-test-automation-run@ebay.com', name: 'dota'],
                                                [$class: 'PreBuildMerge', options: [mergeRemote: 'origin', mergeTarget: 'master']]
                                        ],
                                        submoduleCfg                     : [],
                                        userRemoteConfigs                : [[credentialsId: '54a495be-9f2a-4178-be2e-5f06753bb118', url: "$scmUrl"]]])
                    echo 'Checkout stage completed'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    SHORT_BRANCH_NAME = "${env.BRANCH_NAME}".replaceAll('origin/', '').replaceAll('/', '-')
                    log.info "SHORT_BRANCH_NAME: $SHORT_BRANCH_NAME"

                    DOCKER_IMAGE_VERSION = generateVersion("pom.xml", "${env.BUILD_NUMBER}", SHORT_BRANCH_NAME)
                    MAVEN_VERSION = generateVersionForNexus("pom.xml", "${env.BUILD_NUMBER}", SHORT_BRANCH_NAME)

                    MAVEN_COMMAND = "mvn --batch-mode clean org.codehaus.mojo:versions-maven-plugin:2.1:set -DnewVersion=$MAVEN_VERSION verify -Dsurefire.useSystemClassLoader=false -Dfailsafe.useSystemClassLoader=false -Dpact.verifier.publishResults=true -Dpact.provider.version=${MAVEN_VERSION}"

                    if (SHORT_BRANCH_NAME == 'master') {
                        MAVEN_COMMAND = "$MAVEN_COMMAND"
                    } else {
                        MAVEN_COMMAND = "$MAVEN_COMMAND -Denforcer.skip=true"
                    }

                    DOCKER_GID = sh(script: "stat -c '%g' /var/run/docker.sock", returnStdout: true).trim()
                    sh "docker pull $mavenImage"
                    sh "docker run ${getDockerParams()} $mavenImage sh -c '${MAVEN_COMMAND}'"
                }
            }
            post {
                always {
                    script {
                        junit testResults: 'target/**/TEST-*.xml', allowEmptyResults: true

                        def maven = scanForIssues tool: mavenConsole()
                        publishIssues issues: [maven]
                    }
                }
            }
        }

        stage("Docker Build") {
            steps {
                script {
                    sh "docker build --pull -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_VERSION ."
                }
            }
        }

        stage("Docker Push") {
            parallel {
                stage("Docker Push (Office)") {
                    steps {
                        script {
                            pushToRegistry("${env.REGISTRY_TEST}", "$DOCKER_IMAGE_NAME", "$DOCKER_IMAGE_VERSION")
                        }
                    }
                }

                stage("Docker Push (Harbor)") {
                    when { expression { return SHORT_BRANCH_NAME == 'master' } }
                    steps {
                        pushToRegistry("${env.REGISTRY_PROD}", "$DOCKER_IMAGE_NAME", "$DOCKER_IMAGE_VERSION")
                    }
                }
            }
            post {
                always {
                    sh "docker rmi $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_VERSION"
                }
            }
        }

        stage("Git Tag") {
            when { expression { return SHORT_BRANCH_NAME == 'master' } }
            steps {
                script {
                    sh "docker run --rm --env TAG=$DOCKER_IMAGE_VERSION -v $workspace:/usr/src harbor-test.app.gittigidiyor.net/gg/git-client:5"
                }
            }
        }
    }

    post {
        always {
            sh "docker run --rm -v $workspace:/home/jenkins/ws/ $mavenImage sh -c 'sudo chown -R 1000:1000 /home/jenkins/ws/'"
            deleteDir()
        }
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}

private String getDockerParams() {
    dockerParameters = [
            "--rm",
            "--group-add", "${DOCKER_GID}",
            "-v", "/home/jenkins/.m2/repository/:/home/jenkins/.m2/repository/",
            "-v", "$workspace:$workspace",
            "-w", "$workspace",
            "-v", "/var/run/docker.sock:/var/run/docker.sock"
    ]

    return "${dockerParameters.join(' ')}"
}

